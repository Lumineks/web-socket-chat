Тестовая задача

Требуется реализовать чат на веб-сокетах.

Используемые технологии
Сервер обмена сообщений: websocket сервер (реализовать в рамках выбранных технологий/фреймворка на бэке)
Бэкенд:  js (node - express|koa|nest) или php (laravel)
Фронтенд html/css-фреймворк: twitter bootstrap или пакет material design (в случае выбора js-фреймфорка для фронтенда)
Фронтенд js-фреймворк (не обязательно): angular или react
База данных: mysql (будет плюсом) или mongodb (не будет плюсом)

опциональные инструменты:
- dotenv для локальных настроек.

Использование внешних api (не обязательно): 
- gravatar для загрузки аватара пользователя по его email;
- авторизация через внешний сервис или соц.сеть.

Требования:
[DONE - сделано, TEST - нужно протестить]
DONE 1) обмен данными чата должен работать через веб-сокеты;
DONE 2) мгновенная регистрация (при авторизации, если пользователя в нашей бд не существует - создать). Первый пользователь, который будет создан, становится администратором;
DONE 3) интерфейс должен быть респонсивным и изменяться под мобильное устройство;
DONE 4) внешний вид интерфейса на усмотрение разработчика;
DONE 5) администратор чата (пользователь с соответствующим свойством в бд), должен иметь возможность отключать (mute) и банить (ban)  пользователя;
DONE 6) все пользователи чата должны видеть, кто сейчас онлайн. Список должен динамически реагировать на вход/выход других участников;
DONE 7) если используется mysql, то структуру бд создать миграцями;
DONE 8) создать первого пользователя (админа) с произвольным логином и паролем (прислать логин и пароль с выполненным тз) через миграции (или фикстуры/сиды);
DONE 9) ограничения сообщений - до 200 символов в 1 сообщении, 15 секунд между сообщениями одного пользователя;
DONE 10) зашедшему пользователю присваивается случайный цвет его ник-нейма и цвету сообщения (подобрать список цветов, чтобы текст не сливался с фоном);
DONE 11) требование к ник-нейму - минимум 3 символа, запрет спец.символов;
12) уделить достаточно внимание безопасности сервера. не допускать простейших атак (подмена данных, не контролируемые подключения);
13) правильные архитектурные решения и аккуратный код будет плюсом (google js code style, airbnb code style).


Это тестовое задание у нас делал фактический каждый сотрудник, так что если что-то не понятно - спрашивай у любого :)
В среднем задание делают за 8-10 дней. Сделаешь быстрее - плюс в карму.


 
Дополнительно

Пару подсказок: 
- аякса тут, по идее, не должно быть. максимум - на форме авторизации;
- общение между клиентами (например, бан админом пользователя) - через websocket соединение.

По сути должно быть так:
- 2 страницы. логин и чат;
- если делаешь фронт статикой, то форма логина работает через post запрос;
- как прошли авторизацию - устанавливаем сокет-соединение;
- дальнейшее общение через сокет;
- нужно учитывать, что сокет-серверу требуется передать идентификатор пользователя. Например, это может быть сгенерированный при регистрации токен. Т.к. сокет-сервер работает отдельно от обычных запросов и не знает, какой пользователь соответствует конкретному подключению.

Команды, которые передавать через сокет, от клиента к серверу:
- пользователи в сети;
- полный список пользователей (для админа);
- отправка сообщения;
- забанить/разбанить пользователя;
- замутить/размутить пользователя;
- вход в чат;
- выход из чата.

Когда админ банит пользователя - последнего выкидывает из чата через разрыв соединения.
Если админ ставит пользователя на mute - последний может только читать сообщения.
Необходимо всегда помнить правило "клиенту нельзя доверять". Это значит, что все данные от пользователя нужно перепроверять и защищаться от "подмены" клиента (например, я сохраняю себе html/js страничку, правлю ее и в итоге могу обходить блокировку).

Сокеты:
- нативное решение на “чистых” сокетах;
- готовая библиотека.


Стоит обратить внимание, что по условию задачи, основная связь между клиентом и сервером должна быть на сокетах. Использование http long polling не допускается.